"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var begin = {
  s: {
    bottom: 3,
    left: 5.7
  },
  r: {
    bottom: 8.5,
    left: 4,
    peak: 80
  }
};

var sDefaults = {
  bottom: begin.s.bottom,
  left: begin.s.left,
  width: 6,
  height: 9,
  retreating: false,
  pushForce: 1.6,
  retreatSpeed: 2.6
};

var rDefaults = {
  bottom: begin.r.bottom,
  left: begin.r.left,
  width: 17,
  height: 17,
  marginLeft: -3.6,
  peak: 74,
  rollbacks: 0
};
function randomNumber(min, max) {
  return Math.floor(Math.random() * (max - min)) + min;
}

function workThisArray(myArray) {

  var r = Math.floor(Math.random() * myArray.length);
  var message = '';

  myArray[r].forEach(function (k) {
    //console.log(typeof k);
    if ((typeof k === "undefined" ? "undefined" : _typeof(k)) == "object") {
      //console.log(k)
      var z = Math.floor(Math.random() * k.length);

      if (_typeof(k[z]) == "object") {
        k[z].forEach(function (a) {
          if ((typeof a === "undefined" ? "undefined" : _typeof(a)) == "object") {
            message += a[Math.floor(Math.random() * a.length)];
          } else {
            message += a;
          }
        });
      } else {
        message += k[z];
      }
    } else {
      message += k;
    }
  });
  return message;
}

function stringInArray(s, a) {
  var n = a.indexOf(s);
  if (n > -1) {
    return true;
  } else {
    return false;
  }
}

function randomFrom(array) {
  return array[Math.floor(Math.random() * array.length)];
}

function removeFromArray(array, key, value) {
  for (var i = array.length - 1; i >= 0; --i) {
    if (array[i][key] == value) {
      array.splice(i, 1);
    }
  }
}

function findInArray(array, key, value) {
  for (var i = array.length - 1; i >= 0; --i) {
    if (array[i][key] == value) {
      return i;
      //alert(i);
      //break;
    }
  }
}

function shuffle(o) {
  for (var j, x, i = o.length; i; j = Math.floor(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x) {}
  return o;
}

function capitalize(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

function bold(string) {
  return '<strong>' + string + '</strong>';
}

function similarity(s1, s2) {
  var longer = s1;
  var shorter = s2;
  if (s1.length < s2.length) {
    longer = s2;
    shorter = s1;
  }
  var longerLength = longer.length;
  if (longerLength == 0) {
    return 1.0;
  }
  return (longerLength - editDistance(longer, shorter)) / parseFloat(longerLength);
}

function editDistance(s1, s2) {
  s1 = s1.toLowerCase();
  s2 = s2.toLowerCase();

  var costs = [];
  for (var i = 0; i <= s1.length; i++) {
    var lastValue = i;
    for (var j = 0; j <= s2.length; j++) {
      if (i == 0) costs[j] = j;else {
        if (j > 0) {
          var newValue = costs[j - 1];
          if (s1.charAt(i - 1) != s2.charAt(j - 1)) newValue = Math.min(Math.min(newValue, lastValue), costs[j]) + 1;
          costs[j - 1] = lastValue;
          lastValue = newValue;
        }
      }
    }
    if (i > 0) costs[s2.length] = lastValue;
  }
  return costs[s2.length];
}

function testChance(chance) {
  var r = Math.floor(Math.random() * 100) + 1;
  if (chance >= r) {
    return true;
  } else {
    return false;
  }
}

function sendEvent(c, a, l, v) {
  if (v) {
    ga('send', 'event', { eventCategory: c, eventAction: a, eventLabel: l, eventValue: v });
    console.log('CATEGORY: ' + c + ', ACTION:' + a + ', LABEL:' + l + ', VALUE:' + v);
  } else if (l) {
    ga('send', 'event', { eventCategory: c, eventAction: a, eventLabel: l });
    console.log('CATEGORY: ' + c + ', ACTION:' + a + ', LABEL:' + l);
  } else {
    ga('send', 'event', { eventCategory: c, eventAction: a });
    console.log('CATEGORY: ' + c + ', ACTION:' + a);
  }
}
var storeItems = [{
  id: 1, name: "Fresh Kicks", price: 85, scoreToReveal: 60,
  //id: 1, name: "Fresh Kicks", price: 1, scoreToReveal: 1, 
  desc: "Better arch support means that you can move slightly faster"
}, {
  id: 2, name: "Small Pickaxe", price: 100, scoreToReveal: 91,
  desc: "Maybe carve your boulder into a slightly smaller boulder and see if that makes you feel better."
}, {
  id: 3, name: "A Whole Bunch Of Gum", price: 50, scoreToReveal: 115,
  desc: "If you cover the boulder with all this gum, it'll probably make things worse."
}, {
  id: 4, name: "Analgesic Heat Rub", price: 70, scoreToReveal: 140,
  desc: "Smells terrible!"
}, {
  id: 5, name: "Peach Tea", price: 160, scoreToReveal: 195,
  desc: "a 20 ounce can of peach tea. Tastes pretty good. Probably won't help you with that rock pushing thing."
}, {
  id: 6, name: "Heelies", price: 140, scoreToReveal: 235,
  desc: "You know, those shoes with the wheels on them? Probably better for downhill."
}, {
  id: 7, name: "Dignity", price: 48635, scoreToReveal: 300,
  desc: "You've played this game for far too long. I'm taking your diginity and you can buy it back."
}, {
  id: 8, name: "A Phone Call From Your Mom", price: 60, scoreToReveal: 160,
  desc: "Will make you feel smaller (figuratively, of course)"
}, {
  id: 9, name: "Zeus' Cialis", price: 69, scoreToReveal: 200,
  desc: "Must have fallen from Olympus?"
}, {
  id: 10, name: "Underworld Jock Jams", price: 55, scoreToReveal: 220,
  desc: "Some fresh beats to really get your heart pumping!"
}, {
  id: 11, name: "Hades Haute Couture", price: 275, scoreToReveal: 220,
  desc: "Mainly an aesthetic of ash, chains and sackcloth that is very much de riguer in the underworld."
}, {
  id: 12, name: "A New, Heavier Boulder", price: 250, scoreToReveal: 500,
  desc: "The Gods suddenly remember you exist, and it turns out they still hate you."
}, {
  id: 13, name: "Spite", price: 40, scoreToReveal: 300,
  desc: "Your greatest resource!"
}, {
  id: 14, name: "Crampons", price: 50, scoreToReveal: 250,
  desc: "$129.95 from REI and completely anachronistic to whenever this is supposed to take place."
}, {
  id: 15, name: "Mountain Goat Blood", price: 62, scoreToReveal: 150,
  desc: "The gods start meddling with your bloodline and suddenly you are part mountain goat. Goats are good at climbing down mountains right?"
}, {
  id: 16, name: "Yogurt Pouch", price: 15, scoreToReveal: 275,
  desc: "Pushing for eternity makes you hungry. Get a protein rich snack to keep going."
}, {
  id: 17, name: "Knee Braces", price: 35, scoreToReveal: 275,
  desc: "Doesn't really do much, but makes you feel better at least."
}, {
  id: 18, name: "Moral Support", price: 125, scoreToReveal: 275,
  desc: "You somehow have a friend left on Earth? It's a small comfort in your eternal task."
}, {
  id: 19, name: "Thanatos Remembers", price: 666, scoreToReveal: 300,
  desc: "Thanatos gives you back your chains, assured that you know how to use them."
}, {
  id: 20, name: "Effervescent Lemon Water", price: 2, scoreToReveal: 150,
  desc: "Refreshing, right?"
},
/*
{
  id: 21, name: "Bucket O' Aspirin", price: 60, scoreToReveal: 325,
  desc: "It's not for Sisyphus, but for you. Your finger is probably all messed up. Helps the boulder go up faster."
},
*/
{
  id: 22, name: "1st Place Trophy", price: 25, scoreToReveal: 325,
  desc: "For a Little League baseball game. Makes you swell up with pride, unclear if that'll affect the boulder pushing thing or not"
}, {
  id: 23, name: "Sand Paper", price: 40, scoreToReveal: 325,
  desc: "Are you really planning on whittling down the boulder with 20 grain sandpaper? Alright then go ahead."
}, {
  id: 24, name: "Stickers (Scented)", price: 30, scoreToReveal: 350,
  desc: "A couple packs of scented stickers. Genuinely a pretty nice smell but cheaply made and very sticky"
}, {
  id: 25, name: "Stickers (Puffy)", price: 35, scoreToReveal: 351,
  desc: "A couple packs of puffy stickers. Cushions the boulder, but also makes it bigger."
},
/*
{
  id: 26, name: "Severe Hallucinations", price: 177, scoreToReveal: 350,
  desc: "Could be good?"
},
*/
{
  id: 27, name: "A Million Packs of Firecrackers", price: 75, scoreToReveal: 350,
  desc: "How about you set off fireworks around the boulder and see if that makes any difference?"
}, {
  id: 28, name: "Bedazzler", price: 112, scoreToReveal: 375,
  desc: "Because your boulder could use some ✨PIZZAZ✨"
}, {
  id: 29, name: "Espresso Drip", price: 125, scoreToReveal: 370,
  desc: "One of those beer hats, but filled with espresso."
}];

var keepPushingMessages = ["Keep going.", "Now keep pushing that rock.", "Okay, continue.", "This time should work.", "Push the rock back up hill.", "You must push the rock uphill.", "Continue pushing the rock uphill."];

var rockFellMessages = ["Oops!", "Uh oh!", "Damn it!", "The rock fell.", "Oh no.", "Crap!", "Well, that's not great."];

var retreatMessages = ["Go back and get it!", "Guess you'll have to go back.", "Back down to the bottom.", "Maybe next time.", "No problem! Just go back.", "Go back down the hill.", "Retrieve the rock", "Okay, back down to the bottom.", "Return for the boulder, Sisyphus.", "You must return for the boulder."];
//@prepros-prepend partials/_variables.js
//@prepros-prepend partials/_functions.js
//@prepros-prepend partials/_store.js
//@prepros-prepend partials/_phrases.js

//@prepros-append partials/_vue.js
Vue.directive('focus', {
  // When the bound element is inserted into the DOM...
  inserted: function inserted(el) {
    // Focus the element
    el.focus();
  }
});

var app = new Vue({
  el: '#app',
  data: {
    phase: 'begin',
    message: 'Click Sisyphus to push the rock uphill.',
    score: 0,
    totalScore: 0,
    secondsPlayed: 0,
    totalClicks: 0,
    visibleDrawer: null,
    s: sDefaults,
    r: rDefaults,
    fg: {
      transform: 0
    },
    bg: {
      transform: 0
    },
    store: storeItems,
    inventory: [],
    cheevos: [],
    cheevoPoints: 0
  },

  methods: {
    sisyphusClick: function sisyphusClick() {
      var self = this;
      var f = self.s.pushForce;
      var r = self.s.retreatSpeed;
      var bT = void 0;
      self.totalClicks++;

      if (self.totalClicks == 437) {
        self.getCheevo('437 clicks', "You've clicked on Sisyphus 437 times. And while that may seem like a meaningless number, have you considered that any other number is equally meaningless?", 25);
      }

      if (self.s.retreating == false) {

        //////////////////////////////////////////////////////////////
        // You are pushing the rock uphill
        if (self.phase != 'begin' && self.phase != 'pushing') {
          self.switchMessage('pushing');
        }
        self.score++;
        self.totalScore++;
        self.s.bottom += f;
        self.s.left += f;

        self.r.bottom += f;
        self.r.left += f;

        //background transform
        bT = self.s.pushForce * 0.75;
        self.bg.transform -= bT;

        //alert(self.r.peak);
        if (self.r.left >= self.r.peak) {
          self.r.bottom = begin.r.bottom;
          self.r.left = begin.r.left;
          self.r.falling = true;
          self.s.retreating = true;
          self.switchMessage('falling');
        }

        /////////////////////////////
        // 🏆 Pushing rock cheevos


        if (self.totalScore == 100) {
          self.getCheevo('Making progress', "You have pushed the rock uphill 100 times. Congratulations?", 6);
        } else if (self.totalScore == 300) {
          self.getCheevo('300 pushes', "You know how video game achievements like to do quotes of movies? Like maybe some achievement is about someone named Akbar and then the achievment is called like “It's A Trap!” or something? Anyway, you've clicked the rock 300 times. I don't think there's anything I can add to that.", 16);
        }
      } else if (self.s.retreating == true) {

        //////////////////////////////////////////////////////////////
        // You are running back downhill

        self.s.bottom -= r;
        self.s.left -= r;

        //forground transform
        bT = self.s.retreatSpeed * 0.75;
        self.bg.transform += bT;

        if (self.phase != 'retreat') {
          self.switchMessage('retreat');
          self.r.peak = randomNumber(55, 75);
        }
        if (self.s.bottom <= begin.s.bottom || self.s.left <= begin.s.left) {

          //////////////////////////////////////////////////////////////
          // The ball is rolling back downhill.
          self.s.retreating = false;
          self.s.bottom = begin.s.bottom;
          self.s.left = begin.s.left;
          self.r.falling = false;
          self.fg.transform = 0;
          self.bg.transform = 0;
          self.r.rollbacks++;
          sendEvent("Rollback", self.r.rollbacks + ' time(s)');

          switch (self.r.rollbacks) {
            case 3:
              self.getCheevo('Antiturkey', 'Three gutterballs! Clearly you should keep bowling.', 10);
              break;
            case 7:
              self.getCheevo('Still failing!', "It's rolled back 7 times now, but don't let that stop you.", 15);
              break;
          }
        }
      }
    },
    buyItem: function buyItem(i, item) {
      var self = this;

      if (self.score >= item.price) {
        self.score -= item.price;

        var s = findInArray(self.store, 'id', item.id);
        var n = self.store[s];
        n.showDesc = false;
        self.inventory.push(n);

        //self.store.splice(i,1);
        removeFromArray(self.store, 'id', item.id);
        self.buyItemEffect(item.id);
      }

      sendEvent('item purchase', item.name, item.price);

      if (self.inventory.length == 1) {
        self.getCheevo('Shopping In Hades!', 'First item purchased.', 10);
      }
    },
    foo: function foo(item) {
      item.showDesc = !item.showDesc;
    },
    buyItemEffect: function buyItemEffect(id) {
      var self = this;

      switch (id) {
        case 1:
          //---- Fresh Kicks
          self.s.pushForce = self.s.pushForce * 1.01;
          self.s.retreatSpeed = self.s.retreatSpeed * 1.3;
          break;
        case 2:
          //---- small pickaxe
          self.r.height = self.r.height * 0.85;
          self.r.width = self.r.width * 0.85;
          self.s.pushForce = self.s.pushForce * 1.5;
          break;
        case 3:
          //---- gum
          self.r.height = self.r.height * 1.15;
          self.r.width = self.r.width * 1.15;
          self.s.pushForce = self.s.pushForce * 0.5;
          break;
        case 4:
          //---- analgesic
          self.s.pushForce = self.s.pushForce * 1.35;
          break;
        case 5:
          //---- peach tea
          self.s.pushForce = self.s.pushForce * 0.85;
          self.s.retreatSpeed = self.s.retreatSpeed * 1.4;
          break;
        case 6:
          //---- heelies
          self.s.pushForce = self.s.pushForce * 0.85;
          self.s.retreatSpeed = self.s.retreatSpeed * 1.4;
          break;
        case 7:
          //---- dignity          
          // TBD?
          break;
        case 8:
          //---- a phone call from your mom
          self.s.height = self.s.height * 0.77;
          self.s.width = self.s.width * 0.77;
          self.r.marginLeft = self.r.marginLeft * 1.8;
          break;
        case 9:
        //---- boner pills
        // does nothing
        case 10:
          //---- jock jams
          self.s.pushForce = self.s.pushForce * 1.05;
          break;
        case 11:
          //---- hades fashion
          self.s.pushForce = self.s.pushForce * 0.6;
          break;
        case 12:
          //---- a new, heavier boulder
          self.r.height = self.r.height * 2;
          self.r.width = self.r.width * 2;
          self.r.marginLeft = self.r.marginLeft * 2.7;
          self.s.pushForce = self.s.pushForce * 0.3;
          break;
        case 13:
          //---- spite
          self.s.pushForce = self.s.pushForce * 1.05;
          self.s.retreatSpeed = self.s.retreatSpeed * 1.05;
          break;
        case 14:
          //---- crampons
          self.s.pushForce = self.s.pushForce * 1.4;
          self.s.retreatSpeed = self.s.retreatSpeed * 0.6;
          break;
        case 15:
          //----mountain goat blood
          self.s.pushForce = self.s.pushForce * 0.6;
          self.s.retreatSpeed = self.s.retreatSpeed * 1.4;
          break;
        case 16:
          //---- yogurt pouch
          self.s.retreatSpeed = self.s.retreatSpeed * 1.07;
          break;
        case 17:
          //---- knee braces
          // does nothing
          break;
        case 18:
          //---- moral support
          self.r.height = self.r.height * 1.2;
          self.r.width = self.r.width * 1.2;
          self.r.marginLeft = self.r.marginLeft * 1.4;
          self.s.pushForce = self.s.pushForce * 0.83;
          break;
        case 19:
          //---- thanatos' chains
          self.s.pushForce = self.s.pushForce * 0.4;
          break;
        case 20:
          //---- lemon water
          self.s.pushForce = self.s.pushForce * 1.07;
          self.s.retreatSpeed = self.s.retreatSpeed * 1.07;
          break;
        case 22:
          //---- little league trophy
          self.s.retreatSpeed = self.s.retreatSpeed * 1.13;
          break;
        case 23:
          //---- sand paper
          self.r.height = self.r.height * 0.8;
          self.r.width = self.r.width * 0.8;
          self.r.marginLeft = self.r.marginLeft * 0.9;
          self.s.pushForce = self.s.pushForce * 1.4;
          break;
        case 24:
          //---- stickers (scented)
          self.s.pushForce = self.s.pushForce * 0.8;
          break;
        case 25:
          //---- stickers (puffy) 
          self.r.height = self.r.height * 1.15;
          self.r.width = self.r.width * 1.15;
          self.r.marginLeft = self.r.marginLeft * 1.21;
          self.s.pushForce = self.s.pushForce * 1.18;
          break;
        case 27:
          //---- firecrackers
          self.r.height = self.r.height * 0.8;
          self.r.width = self.r.width * 0.8;
          self.r.marginLeft = self.r.marginLeft * 0.9;
          self.s.pushForce = self.s.pushForce * 1.18;
          break;
        case 28:
          //---- bedazzler
          self.r.height = self.r.height * 1.27;
          self.r.width = self.r.width * 1.27;
          self.r.marginLeft = self.r.marginLeft * 1.36;
          self.s.pushForce = self.s.pushForce * 0.78;
          break;
        case 29:
          //---- espresso
          self.s.retreatSpeed = self.s.retreatSpeed * 1.38;
          break;
      }
    },
    switchMessage: function switchMessage(m) {
      var self = this;
      self.phase = m;
      if (m == 'falling') {
        self.message = randomFrom(rockFellMessages);
      } else if (m == "retreat") {
        self.message = randomFrom(retreatMessages);
      } else if (m == "pushing") {
        self.message = randomFrom(keepPushingMessages);
      }
    },
    getCheevo: function getCheevo(title, text, points) {
      var self = this;
      if (!title) {
        title = null;
      }
      if (!text) {
        text = null;
      }
      var t = void 0;
      if (points) {
        t = '<strong>' + points + '💀</strong> ' + text;
      } else {
        t = text;
      }

      if (title && text) {
        sendEvent("cheevo", title, text);
      } else if (title && points) {
        sendEvent("cheevo", title, points);
      } else if (text && points) {
        sendEvent("cheevo", text, points);
      } else if (text) {
        sendEvent("cheevo", text);
      } else if (title) {
        sendEvent("cheevo", title);
      }

      new PNotify({
        title: title,
        text: t
      });

      if (points) {
        self.cheevoPoints = self.cheevoPoints + 5;
      }

      self.cheevos.push({ title: title, text: text, points: points });

      // give cheevos based on cheevos!
      if (self.cheevos == 2) {
        setTimeout(function () {
          self.getCheevo("And Here Is A Third!", "You've had two achivements, so here is a third achievement for getting those.", 12);
        }, 1500);
      } else if (self.cheevos == 7) {
        setTimeout(function () {
          self.getCheevo("You Cannot Have 7", "7 is considered a lucky number, so now you have 8 achievements.", 3);
        }, 1500);
      }
    },
    everySecond: function everySecond() {
      var self = this;
      self.secondsPlayed++;

      switch (self.secondsPlayed) {
        case 5:
          self.getCheevo('Achievement Unlocked!', 'You have played this game for 5 seconds.', 5);
          break;
        case 60:
          self.getCheevo('One minute mark!', 'You have played the game for one minute.', 10);
          break;
        case 300:
          self.getCheevo('Five Minutes', 'Five minutes of this! How are you feelng about life?', 20);
          break;

      }

      /*
            if (self.secondsPlayed == 1) {
              self.getCheevo('Achievement Unlocked', 'You have come to this website.', 1);
            } else if (self.secondsPlayed == 10) {
              self.getCheevo('Achievement Unlocked', 'You have played the game for '+self.secondsPlayed+' seconds.', 5);
            } else  if (self.secondsPlayed == 60) {
              self.getCheevo('One minute mark!', 'You have played the game for one minute.', 10);
            } */
    },
    toggleDrawer: function toggleDrawer(d) {
      var self = this;
      if (d == self.visibleDrawer) {
        self.visibleDrawer = null;
      } else {
        self.visibleDrawer = d;
      }
    }
  },

  computed: {
    rockLeft: function rockLeft() {
      return 'calc(' + this.s.width + '% + ' + this.r.left + '%)';
    },
    rockHeight: function rockHeight() {
      return this.r.height + '%';
    },
    rockWidth: function rockWidth() {
      return this.r.width + '%';
    },
    rockMarginLeft: function rockMarginLeft() {
      return this.r.marginLeft + '%';
    },
    foregroundTransform: function foregroundTransform() {
      return 'translateX(' + this.fg.transform + '%)';
    },
    backgroundTransform: function backgroundTransform() {
      return 'translateX(' + this.bg.transform + '%)';
    },
    availableUpgrades: function availableUpgrades() {
      var self = this;
      var a = [];
      self.store.forEach(function (item, i) {
        if (self.totalScore >= item.scoreToReveal) {
          a.push(item);
        }
      });
      return a;
    }
  },

  mounted: function mounted() {
    var self = this;

    setInterval(function () {
      //alert('hit');
      self.everySecond();
    }, 1000);
  }

});
//# sourceMappingURL=sisyphus.min.js.map